{
	"compiler": {
		"version": "0.5.15+commit.6a57276f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
					"details": "An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated This function MAY throw to revert and reject the transfer Return of other amount than the magic value WILL result in the transaction being reverted Note: The token contract address is always the message sender",
					"params": {
						"_amounts": "An array containing amounts of each token being transferred",
						"_data": "Additional data with no specified format",
						"_from": "The address which previously owned the token",
						"_ids": "An array containing ids of each token being transferred",
						"_operator": "The address which called the `safeBatchTransferFrom` function"
					},
					"return": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`"
				},
				"onERC1155Received(address,address,uint256,uint256,bytes)": {
					"details": "An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated This function MAY throw to revert and reject the transfer Return of other amount than the magic value MUST result in the transaction being reverted Note: The token contract address is always the message sender",
					"params": {
						"_amount": "The amount of tokens being transferred",
						"_data": "Additional data with no specified format",
						"_from": "The address which previously owned the token",
						"_id": "The id of the token being transferred",
						"_operator": "The address which called the `safeTransferFrom` function"
					},
					"return": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`"
				},
				"supportsInterface(bytes4)": {
					"details": "This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.     This function MUST NOT consume more than 5,000 gas.",
					"params": {
						"interfaceID": "The ERC-165 interface ID that is queried for support.s"
					},
					"return": "Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported."
				}
			}
		},
		"userdoc": {
			"methods": {
				"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
					"notice": "Handle the receipt of multiple ERC1155 token types"
				},
				"onERC1155Received(address,address,uint256,uint256,bytes)": {
					"notice": "Handle the receipt of a single ERC1155 token type"
				},
				"supportsInterface(bytes4)": {
					"notice": "Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/dig/ERC1155/ERC1155Tradable.sol": "IERC1155TokenReceiver"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/dig/ERC1155/ERC1155Tradable.sol": {
			"keccak256": "0xd8b7a88cd16c7733f90d50820a58ae088d8b246c0597376fbd25824ac180fd32",
			"urls": [
				"bzz-raw://0efc8bc5d3839948db85be3a9374da4bc47a0890f2776958dbcaed1b3594f4df",
				"dweb:/ipfs/QmSmF2DsQRim64Tu3wxMzpPVZmDTSKTGtdCP3zwmcL8Edg"
			]
		}
	},
	"version": 1
}